Grammar:

Rule 0     S' -> program
Rule 1     program -> <empty>
Rule 2     program -> instructions
Rule 3     instructions -> instruction
Rule 4     instructions -> instructions instruction
Rule 5     instruction -> { instructions }
Rule 6     instruction -> print_i ;
Rule 7     instruction -> assign ;
Rule 8     instruction -> while_l
Rule 9     instruction -> for_l
Rule 10    instruction -> continue_i ;
Rule 11    instruction -> break_i ;
Rule 12    instruction -> return_i ;
Rule 13    instruction -> if_i
Rule 14    expr -> mat_fun ( expr )
Rule 15    expr -> matrix
Rule 16    expr -> unary
Rule 17    expr -> expr OR expr  [precedence=left, level=4]
Rule 18    expr -> expr AND expr  [precedence=left, level=4]
Rule 19    expr -> expr XOR expr  [precedence=left, level=4]
Rule 20    expr -> expr DOTSUB expr  [precedence=left, level=5]
Rule 21    expr -> expr DOTADD expr  [precedence=left, level=5]
Rule 22    expr -> expr DOTDIV expr  [precedence=left, level=6]
Rule 23    expr -> expr DOTMUL expr  [precedence=left, level=6]
Rule 24    expr -> expr LESSEREQUAL expr  [precedence=nonassoc, level=3]
Rule 25    expr -> expr GREATEREQUAL expr  [precedence=nonassoc, level=3]
Rule 26    expr -> expr LESSER expr  [precedence=nonassoc, level=3]
Rule 27    expr -> expr GREATER expr  [precedence=nonassoc, level=3]
Rule 28    expr -> expr NOTEQUAL expr  [precedence=nonassoc, level=3]
Rule 29    expr -> expr EQUAL expr  [precedence=nonassoc, level=3]
Rule 30    expr -> expr / expr  [precedence=left, level=6]
Rule 31    expr -> expr * expr  [precedence=left, level=6]
Rule 32    expr -> expr - expr  [precedence=left, level=5]
Rule 33    expr -> expr + expr  [precedence=left, level=5]
Rule 34    expr -> ( expr )
Rule 35    expr -> var
Rule 36    expr -> FLOATNUM
Rule 37    expr -> INTNUM
Rule 38    expr -> STRING
Rule 39    var -> ID
Rule 40    var -> matrix_element
Rule 41    matrix_element -> ID [ expr , expr ]
Rule 42    assign -> var DIVASSIGN expr
Rule 43    assign -> var MULASSIGN expr
Rule 44    assign -> var SUBASSIGN expr
Rule 45    assign -> var ADDASSIGN expr
Rule 46    assign -> var = expr
Rule 47    unary -> NOT expr  [precedence=right, level=7]
Rule 48    unary -> - expr  [precedence=right, level=7]
Rule 49    matrix -> [ vectors ]
Rule 50    vectors -> vector
Rule 51    vectors -> vectors , vector
Rule 52    vector -> [ variables ]
Rule 53    variables -> variable
Rule 54    variables -> variables , variable
Rule 55    variable -> ID [ expr : ]
Rule 56    variable -> ID [ : expr ]
Rule 57    variable -> ID [ expr : expr , expr : expr ]
Rule 58    variable -> ID [ expr : expr ]
Rule 59    variable -> expr
Rule 60    mat_fun -> ONES
Rule 61    mat_fun -> EYE
Rule 62    mat_fun -> ZEROS
Rule 63    if_i -> IF ( expr ) instruction ELSE instruction  [precedence=right, level=2]
Rule 64    if_i -> IF ( expr ) instruction  [precedence=right, level=1]
Rule 65    while_l -> WHILE ( expr ) instruction
Rule 66    for_l -> FOR ID = expr : expr instruction
Rule 67    return_i -> RETURN expr
Rule 68    return_i -> RETURN
Rule 69    break_i -> BREAK
Rule 70    continue_i -> CONTINUE
Rule 71    print_i -> PRINT printargs
Rule 72    printargs -> expr
Rule 73    printargs -> expr , printargs

Terminals, with rules where they appear:

(                    : 14 34 63 64 65
)                    : 14 34 63 64 65
*                    : 31
+                    : 33
,                    : 41 51 54 57 73
-                    : 32 48
/                    : 30
:                    : 55 56 57 57 58 66
;                    : 6 7 10 11 12
=                    : 46 66
ADDASSIGN            : 45
AND                  : 18
BREAK                : 69
CONTINUE             : 70
DIVASSIGN            : 42
DOTADD               : 21
DOTDIV               : 22
DOTMUL               : 23
DOTSUB               : 20
ELSE                 : 63
EQUAL                : 29
EYE                  : 61
FLOATNUM             : 36
FOR                  : 66
GREATER              : 27
GREATEREQUAL         : 25
ID                   : 39 41 55 56 57 58 66
IF                   : 63 64
INTNUM               : 37
LESSER               : 26
LESSEREQUAL          : 24
MULASSIGN            : 43
NOT                  : 47
NOTEQUAL             : 28
ONES                 : 60
OR                   : 17
PRINT                : 71
RETURN               : 67 68
STRING               : 38
SUBASSIGN            : 44
WHILE                : 65
XOR                  : 19
ZEROS                : 62
[                    : 41 49 52 55 56 57 58
]                    : 41 49 52 55 56 57 58
error                : 
{                    : 5
}                    : 5

Nonterminals, with rules where they appear:

assign               : 7
break_i              : 11
continue_i           : 10
expr                 : 14 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 41 41 42 43 44 45 46 47 48 55 56 57 57 57 57 58 58 59 63 64 65 66 66 67 72 73
for_l                : 9
if_i                 : 13
instruction          : 3 4 63 63 64 65 66
instructions         : 2 4 5
mat_fun              : 14
matrix               : 15
matrix_element       : 40
print_i              : 6
printargs            : 71 73
program              : 0
return_i             : 12
unary                : 16
var                  : 35 42 43 44 45 46
variable             : 53 54
variables            : 52 54
vector               : 50 51
vectors              : 49 51
while_l              : 8


state 0

    (0) S' -> . program
    (1) program -> .
    (2) program -> . instructions
    (3) instructions -> . instruction
    (4) instructions -> . instructions instruction
    (5) instruction -> . { instructions }
    (6) instruction -> . print_i ;
    (7) instruction -> . assign ;
    (8) instruction -> . while_l
    (9) instruction -> . for_l
    (10) instruction -> . continue_i ;
    (11) instruction -> . break_i ;
    (12) instruction -> . return_i ;
    (13) instruction -> . if_i
    (71) print_i -> . PRINT printargs
    (42) assign -> . var DIVASSIGN expr
    (43) assign -> . var MULASSIGN expr
    (44) assign -> . var SUBASSIGN expr
    (45) assign -> . var ADDASSIGN expr
    (46) assign -> . var = expr
    (65) while_l -> . WHILE ( expr ) instruction
    (66) for_l -> . FOR ID = expr : expr instruction
    (70) continue_i -> . CONTINUE
    (69) break_i -> . BREAK
    (67) return_i -> . RETURN expr
    (68) return_i -> . RETURN
    (63) if_i -> . IF ( expr ) instruction ELSE instruction
    (64) if_i -> . IF ( expr ) instruction
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    $end            reduce using rule 1 (program -> .)
    {               shift and go to state 4
    PRINT           shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    RETURN          shift and go to state 20
    IF              shift and go to state 21
    ID              shift and go to state 17

    program                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    print_i                        shift and go to state 5
    assign                         shift and go to state 6
    while_l                        shift and go to state 7
    for_l                          shift and go to state 8
    continue_i                     shift and go to state 9
    break_i                        shift and go to state 10
    return_i                       shift and go to state 11
    if_i                           shift and go to state 12
    var                            shift and go to state 14
    matrix_element                 shift and go to state 22

state 1

    (0) S' -> program .


state 2

    (2) program -> instructions .
    (4) instructions -> instructions . instruction
    (5) instruction -> . { instructions }
    (6) instruction -> . print_i ;
    (7) instruction -> . assign ;
    (8) instruction -> . while_l
    (9) instruction -> . for_l
    (10) instruction -> . continue_i ;
    (11) instruction -> . break_i ;
    (12) instruction -> . return_i ;
    (13) instruction -> . if_i
    (71) print_i -> . PRINT printargs
    (42) assign -> . var DIVASSIGN expr
    (43) assign -> . var MULASSIGN expr
    (44) assign -> . var SUBASSIGN expr
    (45) assign -> . var ADDASSIGN expr
    (46) assign -> . var = expr
    (65) while_l -> . WHILE ( expr ) instruction
    (66) for_l -> . FOR ID = expr : expr instruction
    (70) continue_i -> . CONTINUE
    (69) break_i -> . BREAK
    (67) return_i -> . RETURN expr
    (68) return_i -> . RETURN
    (63) if_i -> . IF ( expr ) instruction ELSE instruction
    (64) if_i -> . IF ( expr ) instruction
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    $end            reduce using rule 2 (program -> instructions .)
    {               shift and go to state 4
    PRINT           shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    RETURN          shift and go to state 20
    IF              shift and go to state 21
    ID              shift and go to state 17

    instruction                    shift and go to state 23
    print_i                        shift and go to state 5
    assign                         shift and go to state 6
    while_l                        shift and go to state 7
    for_l                          shift and go to state 8
    continue_i                     shift and go to state 9
    break_i                        shift and go to state 10
    return_i                       shift and go to state 11
    if_i                           shift and go to state 12
    var                            shift and go to state 14
    matrix_element                 shift and go to state 22

state 3

    (3) instructions -> instruction .
    {               reduce using rule 3 (instructions -> instruction .)
    PRINT           reduce using rule 3 (instructions -> instruction .)
    WHILE           reduce using rule 3 (instructions -> instruction .)
    FOR             reduce using rule 3 (instructions -> instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instruction .)
    BREAK           reduce using rule 3 (instructions -> instruction .)
    RETURN          reduce using rule 3 (instructions -> instruction .)
    IF              reduce using rule 3 (instructions -> instruction .)
    ID              reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)
    }               reduce using rule 3 (instructions -> instruction .)


state 4

    (5) instruction -> { . instructions }
    (3) instructions -> . instruction
    (4) instructions -> . instructions instruction
    (5) instruction -> . { instructions }
    (6) instruction -> . print_i ;
    (7) instruction -> . assign ;
    (8) instruction -> . while_l
    (9) instruction -> . for_l
    (10) instruction -> . continue_i ;
    (11) instruction -> . break_i ;
    (12) instruction -> . return_i ;
    (13) instruction -> . if_i
    (71) print_i -> . PRINT printargs
    (42) assign -> . var DIVASSIGN expr
    (43) assign -> . var MULASSIGN expr
    (44) assign -> . var SUBASSIGN expr
    (45) assign -> . var ADDASSIGN expr
    (46) assign -> . var = expr
    (65) while_l -> . WHILE ( expr ) instruction
    (66) for_l -> . FOR ID = expr : expr instruction
    (70) continue_i -> . CONTINUE
    (69) break_i -> . BREAK
    (67) return_i -> . RETURN expr
    (68) return_i -> . RETURN
    (63) if_i -> . IF ( expr ) instruction ELSE instruction
    (64) if_i -> . IF ( expr ) instruction
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    {               shift and go to state 4
    PRINT           shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    RETURN          shift and go to state 20
    IF              shift and go to state 21
    ID              shift and go to state 17

    instructions                   shift and go to state 24
    instruction                    shift and go to state 3
    print_i                        shift and go to state 5
    assign                         shift and go to state 6
    while_l                        shift and go to state 7
    for_l                          shift and go to state 8
    continue_i                     shift and go to state 9
    break_i                        shift and go to state 10
    return_i                       shift and go to state 11
    if_i                           shift and go to state 12
    var                            shift and go to state 14
    matrix_element                 shift and go to state 22

state 5

    (6) instruction -> print_i . ;
    ;               shift and go to state 25


state 6

    (7) instruction -> assign . ;
    ;               shift and go to state 26


state 7

    (8) instruction -> while_l .
    {               reduce using rule 8 (instruction -> while_l .)
    PRINT           reduce using rule 8 (instruction -> while_l .)
    WHILE           reduce using rule 8 (instruction -> while_l .)
    FOR             reduce using rule 8 (instruction -> while_l .)
    CONTINUE        reduce using rule 8 (instruction -> while_l .)
    BREAK           reduce using rule 8 (instruction -> while_l .)
    RETURN          reduce using rule 8 (instruction -> while_l .)
    IF              reduce using rule 8 (instruction -> while_l .)
    ID              reduce using rule 8 (instruction -> while_l .)
    $end            reduce using rule 8 (instruction -> while_l .)
    }               reduce using rule 8 (instruction -> while_l .)
    ELSE            reduce using rule 8 (instruction -> while_l .)


state 8

    (9) instruction -> for_l .
    {               reduce using rule 9 (instruction -> for_l .)
    PRINT           reduce using rule 9 (instruction -> for_l .)
    WHILE           reduce using rule 9 (instruction -> for_l .)
    FOR             reduce using rule 9 (instruction -> for_l .)
    CONTINUE        reduce using rule 9 (instruction -> for_l .)
    BREAK           reduce using rule 9 (instruction -> for_l .)
    RETURN          reduce using rule 9 (instruction -> for_l .)
    IF              reduce using rule 9 (instruction -> for_l .)
    ID              reduce using rule 9 (instruction -> for_l .)
    $end            reduce using rule 9 (instruction -> for_l .)
    }               reduce using rule 9 (instruction -> for_l .)
    ELSE            reduce using rule 9 (instruction -> for_l .)


state 9

    (10) instruction -> continue_i . ;
    ;               shift and go to state 27


state 10

    (11) instruction -> break_i . ;
    ;               shift and go to state 28


state 11

    (12) instruction -> return_i . ;
    ;               shift and go to state 29


state 12

    (13) instruction -> if_i .
    {               reduce using rule 13 (instruction -> if_i .)
    PRINT           reduce using rule 13 (instruction -> if_i .)
    WHILE           reduce using rule 13 (instruction -> if_i .)
    FOR             reduce using rule 13 (instruction -> if_i .)
    CONTINUE        reduce using rule 13 (instruction -> if_i .)
    BREAK           reduce using rule 13 (instruction -> if_i .)
    RETURN          reduce using rule 13 (instruction -> if_i .)
    IF              reduce using rule 13 (instruction -> if_i .)
    ID              reduce using rule 13 (instruction -> if_i .)
    $end            reduce using rule 13 (instruction -> if_i .)
    }               reduce using rule 13 (instruction -> if_i .)
    ELSE            reduce using rule 13 (instruction -> if_i .)


state 13

    (71) print_i -> PRINT . printargs
    (72) printargs -> . expr
    (73) printargs -> . expr , printargs
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    printargs                      shift and go to state 30
    expr                           shift and go to state 31
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 14

    (42) assign -> var . DIVASSIGN expr
    (43) assign -> var . MULASSIGN expr
    (44) assign -> var . SUBASSIGN expr
    (45) assign -> var . ADDASSIGN expr
    (46) assign -> var . = expr
    DIVASSIGN       shift and go to state 46
    MULASSIGN       shift and go to state 47
    SUBASSIGN       shift and go to state 48
    ADDASSIGN       shift and go to state 49
    =               shift and go to state 50


state 15

    (65) while_l -> WHILE . ( expr ) instruction
    (               shift and go to state 51


state 16

    (66) for_l -> FOR . ID = expr : expr instruction
    ID              shift and go to state 52


state 17

    (39) var -> ID .
    (41) matrix_element -> ID . [ expr , expr ]
    DIVASSIGN       reduce using rule 39 (var -> ID .)
    MULASSIGN       reduce using rule 39 (var -> ID .)
    SUBASSIGN       reduce using rule 39 (var -> ID .)
    ADDASSIGN       reduce using rule 39 (var -> ID .)
    =               reduce using rule 39 (var -> ID .)
    ,               reduce using rule 39 (var -> ID .)
    OR              reduce using rule 39 (var -> ID .)
    AND             reduce using rule 39 (var -> ID .)
    XOR             reduce using rule 39 (var -> ID .)
    DOTSUB          reduce using rule 39 (var -> ID .)
    DOTADD          reduce using rule 39 (var -> ID .)
    DOTDIV          reduce using rule 39 (var -> ID .)
    DOTMUL          reduce using rule 39 (var -> ID .)
    LESSEREQUAL     reduce using rule 39 (var -> ID .)
    GREATEREQUAL    reduce using rule 39 (var -> ID .)
    LESSER          reduce using rule 39 (var -> ID .)
    GREATER         reduce using rule 39 (var -> ID .)
    NOTEQUAL        reduce using rule 39 (var -> ID .)
    EQUAL           reduce using rule 39 (var -> ID .)
    /               reduce using rule 39 (var -> ID .)
    *               reduce using rule 39 (var -> ID .)
    -               reduce using rule 39 (var -> ID .)
    +               reduce using rule 39 (var -> ID .)
    ;               reduce using rule 39 (var -> ID .)
    )               reduce using rule 39 (var -> ID .)
    ]               reduce using rule 39 (var -> ID .)
    :               reduce using rule 39 (var -> ID .)
    {               reduce using rule 39 (var -> ID .)
    PRINT           reduce using rule 39 (var -> ID .)
    WHILE           reduce using rule 39 (var -> ID .)
    FOR             reduce using rule 39 (var -> ID .)
    CONTINUE        reduce using rule 39 (var -> ID .)
    BREAK           reduce using rule 39 (var -> ID .)
    RETURN          reduce using rule 39 (var -> ID .)
    IF              reduce using rule 39 (var -> ID .)
    ID              reduce using rule 39 (var -> ID .)
    [               shift and go to state 53


state 18

    (70) continue_i -> CONTINUE .
    ;               reduce using rule 70 (continue_i -> CONTINUE .)


state 19

    (69) break_i -> BREAK .
    ;               reduce using rule 69 (break_i -> BREAK .)


state 20

    (67) return_i -> RETURN . expr
    (68) return_i -> RETURN .
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    ;               reduce using rule 68 (return_i -> RETURN .)
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 54
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 21

    (63) if_i -> IF . ( expr ) instruction ELSE instruction
    (64) if_i -> IF . ( expr ) instruction
    (               shift and go to state 55


state 22

    (40) var -> matrix_element .
    DIVASSIGN       reduce using rule 40 (var -> matrix_element .)
    MULASSIGN       reduce using rule 40 (var -> matrix_element .)
    SUBASSIGN       reduce using rule 40 (var -> matrix_element .)
    ADDASSIGN       reduce using rule 40 (var -> matrix_element .)
    =               reduce using rule 40 (var -> matrix_element .)
    ,               reduce using rule 40 (var -> matrix_element .)
    OR              reduce using rule 40 (var -> matrix_element .)
    AND             reduce using rule 40 (var -> matrix_element .)
    XOR             reduce using rule 40 (var -> matrix_element .)
    DOTSUB          reduce using rule 40 (var -> matrix_element .)
    DOTADD          reduce using rule 40 (var -> matrix_element .)
    DOTDIV          reduce using rule 40 (var -> matrix_element .)
    DOTMUL          reduce using rule 40 (var -> matrix_element .)
    LESSEREQUAL     reduce using rule 40 (var -> matrix_element .)
    GREATEREQUAL    reduce using rule 40 (var -> matrix_element .)
    LESSER          reduce using rule 40 (var -> matrix_element .)
    GREATER         reduce using rule 40 (var -> matrix_element .)
    NOTEQUAL        reduce using rule 40 (var -> matrix_element .)
    EQUAL           reduce using rule 40 (var -> matrix_element .)
    /               reduce using rule 40 (var -> matrix_element .)
    *               reduce using rule 40 (var -> matrix_element .)
    -               reduce using rule 40 (var -> matrix_element .)
    +               reduce using rule 40 (var -> matrix_element .)
    ;               reduce using rule 40 (var -> matrix_element .)
    )               reduce using rule 40 (var -> matrix_element .)
    ]               reduce using rule 40 (var -> matrix_element .)
    :               reduce using rule 40 (var -> matrix_element .)
    {               reduce using rule 40 (var -> matrix_element .)
    PRINT           reduce using rule 40 (var -> matrix_element .)
    WHILE           reduce using rule 40 (var -> matrix_element .)
    FOR             reduce using rule 40 (var -> matrix_element .)
    CONTINUE        reduce using rule 40 (var -> matrix_element .)
    BREAK           reduce using rule 40 (var -> matrix_element .)
    RETURN          reduce using rule 40 (var -> matrix_element .)
    IF              reduce using rule 40 (var -> matrix_element .)
    ID              reduce using rule 40 (var -> matrix_element .)


state 23

    (4) instructions -> instructions instruction .
    {               reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)


state 24

    (5) instruction -> { instructions . }
    (4) instructions -> instructions . instruction
    (5) instruction -> . { instructions }
    (6) instruction -> . print_i ;
    (7) instruction -> . assign ;
    (8) instruction -> . while_l
    (9) instruction -> . for_l
    (10) instruction -> . continue_i ;
    (11) instruction -> . break_i ;
    (12) instruction -> . return_i ;
    (13) instruction -> . if_i
    (71) print_i -> . PRINT printargs
    (42) assign -> . var DIVASSIGN expr
    (43) assign -> . var MULASSIGN expr
    (44) assign -> . var SUBASSIGN expr
    (45) assign -> . var ADDASSIGN expr
    (46) assign -> . var = expr
    (65) while_l -> . WHILE ( expr ) instruction
    (66) for_l -> . FOR ID = expr : expr instruction
    (70) continue_i -> . CONTINUE
    (69) break_i -> . BREAK
    (67) return_i -> . RETURN expr
    (68) return_i -> . RETURN
    (63) if_i -> . IF ( expr ) instruction ELSE instruction
    (64) if_i -> . IF ( expr ) instruction
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    }               shift and go to state 56
    {               shift and go to state 4
    PRINT           shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    RETURN          shift and go to state 20
    IF              shift and go to state 21
    ID              shift and go to state 17

    instruction                    shift and go to state 23
    print_i                        shift and go to state 5
    assign                         shift and go to state 6
    while_l                        shift and go to state 7
    for_l                          shift and go to state 8
    continue_i                     shift and go to state 9
    break_i                        shift and go to state 10
    return_i                       shift and go to state 11
    if_i                           shift and go to state 12
    var                            shift and go to state 14
    matrix_element                 shift and go to state 22

state 25

    (6) instruction -> print_i ; .
    {               reduce using rule 6 (instruction -> print_i ; .)
    PRINT           reduce using rule 6 (instruction -> print_i ; .)
    WHILE           reduce using rule 6 (instruction -> print_i ; .)
    FOR             reduce using rule 6 (instruction -> print_i ; .)
    CONTINUE        reduce using rule 6 (instruction -> print_i ; .)
    BREAK           reduce using rule 6 (instruction -> print_i ; .)
    RETURN          reduce using rule 6 (instruction -> print_i ; .)
    IF              reduce using rule 6 (instruction -> print_i ; .)
    ID              reduce using rule 6 (instruction -> print_i ; .)
    $end            reduce using rule 6 (instruction -> print_i ; .)
    }               reduce using rule 6 (instruction -> print_i ; .)
    ELSE            reduce using rule 6 (instruction -> print_i ; .)


state 26

    (7) instruction -> assign ; .
    {               reduce using rule 7 (instruction -> assign ; .)
    PRINT           reduce using rule 7 (instruction -> assign ; .)
    WHILE           reduce using rule 7 (instruction -> assign ; .)
    FOR             reduce using rule 7 (instruction -> assign ; .)
    CONTINUE        reduce using rule 7 (instruction -> assign ; .)
    BREAK           reduce using rule 7 (instruction -> assign ; .)
    RETURN          reduce using rule 7 (instruction -> assign ; .)
    IF              reduce using rule 7 (instruction -> assign ; .)
    ID              reduce using rule 7 (instruction -> assign ; .)
    $end            reduce using rule 7 (instruction -> assign ; .)
    }               reduce using rule 7 (instruction -> assign ; .)
    ELSE            reduce using rule 7 (instruction -> assign ; .)


state 27

    (10) instruction -> continue_i ; .
    {               reduce using rule 10 (instruction -> continue_i ; .)
    PRINT           reduce using rule 10 (instruction -> continue_i ; .)
    WHILE           reduce using rule 10 (instruction -> continue_i ; .)
    FOR             reduce using rule 10 (instruction -> continue_i ; .)
    CONTINUE        reduce using rule 10 (instruction -> continue_i ; .)
    BREAK           reduce using rule 10 (instruction -> continue_i ; .)
    RETURN          reduce using rule 10 (instruction -> continue_i ; .)
    IF              reduce using rule 10 (instruction -> continue_i ; .)
    ID              reduce using rule 10 (instruction -> continue_i ; .)
    $end            reduce using rule 10 (instruction -> continue_i ; .)
    }               reduce using rule 10 (instruction -> continue_i ; .)
    ELSE            reduce using rule 10 (instruction -> continue_i ; .)


state 28

    (11) instruction -> break_i ; .
    {               reduce using rule 11 (instruction -> break_i ; .)
    PRINT           reduce using rule 11 (instruction -> break_i ; .)
    WHILE           reduce using rule 11 (instruction -> break_i ; .)
    FOR             reduce using rule 11 (instruction -> break_i ; .)
    CONTINUE        reduce using rule 11 (instruction -> break_i ; .)
    BREAK           reduce using rule 11 (instruction -> break_i ; .)
    RETURN          reduce using rule 11 (instruction -> break_i ; .)
    IF              reduce using rule 11 (instruction -> break_i ; .)
    ID              reduce using rule 11 (instruction -> break_i ; .)
    $end            reduce using rule 11 (instruction -> break_i ; .)
    }               reduce using rule 11 (instruction -> break_i ; .)
    ELSE            reduce using rule 11 (instruction -> break_i ; .)


state 29

    (12) instruction -> return_i ; .
    {               reduce using rule 12 (instruction -> return_i ; .)
    PRINT           reduce using rule 12 (instruction -> return_i ; .)
    WHILE           reduce using rule 12 (instruction -> return_i ; .)
    FOR             reduce using rule 12 (instruction -> return_i ; .)
    CONTINUE        reduce using rule 12 (instruction -> return_i ; .)
    BREAK           reduce using rule 12 (instruction -> return_i ; .)
    RETURN          reduce using rule 12 (instruction -> return_i ; .)
    IF              reduce using rule 12 (instruction -> return_i ; .)
    ID              reduce using rule 12 (instruction -> return_i ; .)
    $end            reduce using rule 12 (instruction -> return_i ; .)
    }               reduce using rule 12 (instruction -> return_i ; .)
    ELSE            reduce using rule 12 (instruction -> return_i ; .)


state 30

    (71) print_i -> PRINT printargs .
    ;               reduce using rule 71 (print_i -> PRINT printargs .)


state 31

    (72) printargs -> expr .
    (73) printargs -> expr . , printargs
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ;               reduce using rule 72 (printargs -> expr .)
    ,               shift and go to state 57
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 32

    (14) expr -> mat_fun . ( expr )
    (               shift and go to state 75


state 33

    (34) expr -> ( . expr )
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 76
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 34

    (15) expr -> matrix .
    ,               reduce using rule 15 (expr -> matrix .)
    OR              reduce using rule 15 (expr -> matrix .)
    AND             reduce using rule 15 (expr -> matrix .)
    XOR             reduce using rule 15 (expr -> matrix .)
    DOTSUB          reduce using rule 15 (expr -> matrix .)
    DOTADD          reduce using rule 15 (expr -> matrix .)
    DOTDIV          reduce using rule 15 (expr -> matrix .)
    DOTMUL          reduce using rule 15 (expr -> matrix .)
    LESSEREQUAL     reduce using rule 15 (expr -> matrix .)
    GREATEREQUAL    reduce using rule 15 (expr -> matrix .)
    LESSER          reduce using rule 15 (expr -> matrix .)
    GREATER         reduce using rule 15 (expr -> matrix .)
    NOTEQUAL        reduce using rule 15 (expr -> matrix .)
    EQUAL           reduce using rule 15 (expr -> matrix .)
    /               reduce using rule 15 (expr -> matrix .)
    *               reduce using rule 15 (expr -> matrix .)
    -               reduce using rule 15 (expr -> matrix .)
    +               reduce using rule 15 (expr -> matrix .)
    ;               reduce using rule 15 (expr -> matrix .)
    )               reduce using rule 15 (expr -> matrix .)
    ]               reduce using rule 15 (expr -> matrix .)
    :               reduce using rule 15 (expr -> matrix .)
    {               reduce using rule 15 (expr -> matrix .)
    PRINT           reduce using rule 15 (expr -> matrix .)
    WHILE           reduce using rule 15 (expr -> matrix .)
    FOR             reduce using rule 15 (expr -> matrix .)
    CONTINUE        reduce using rule 15 (expr -> matrix .)
    BREAK           reduce using rule 15 (expr -> matrix .)
    RETURN          reduce using rule 15 (expr -> matrix .)
    IF              reduce using rule 15 (expr -> matrix .)
    ID              reduce using rule 15 (expr -> matrix .)


state 35

    (16) expr -> unary .
    ,               reduce using rule 16 (expr -> unary .)
    OR              reduce using rule 16 (expr -> unary .)
    AND             reduce using rule 16 (expr -> unary .)
    XOR             reduce using rule 16 (expr -> unary .)
    DOTSUB          reduce using rule 16 (expr -> unary .)
    DOTADD          reduce using rule 16 (expr -> unary .)
    DOTDIV          reduce using rule 16 (expr -> unary .)
    DOTMUL          reduce using rule 16 (expr -> unary .)
    LESSEREQUAL     reduce using rule 16 (expr -> unary .)
    GREATEREQUAL    reduce using rule 16 (expr -> unary .)
    LESSER          reduce using rule 16 (expr -> unary .)
    GREATER         reduce using rule 16 (expr -> unary .)
    NOTEQUAL        reduce using rule 16 (expr -> unary .)
    EQUAL           reduce using rule 16 (expr -> unary .)
    /               reduce using rule 16 (expr -> unary .)
    *               reduce using rule 16 (expr -> unary .)
    -               reduce using rule 16 (expr -> unary .)
    +               reduce using rule 16 (expr -> unary .)
    ;               reduce using rule 16 (expr -> unary .)
    )               reduce using rule 16 (expr -> unary .)
    ]               reduce using rule 16 (expr -> unary .)
    :               reduce using rule 16 (expr -> unary .)
    {               reduce using rule 16 (expr -> unary .)
    PRINT           reduce using rule 16 (expr -> unary .)
    WHILE           reduce using rule 16 (expr -> unary .)
    FOR             reduce using rule 16 (expr -> unary .)
    CONTINUE        reduce using rule 16 (expr -> unary .)
    BREAK           reduce using rule 16 (expr -> unary .)
    RETURN          reduce using rule 16 (expr -> unary .)
    IF              reduce using rule 16 (expr -> unary .)
    ID              reduce using rule 16 (expr -> unary .)


state 36

    (48) unary -> - . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 77
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 37

    (35) expr -> var .
    ,               reduce using rule 35 (expr -> var .)
    OR              reduce using rule 35 (expr -> var .)
    AND             reduce using rule 35 (expr -> var .)
    XOR             reduce using rule 35 (expr -> var .)
    DOTSUB          reduce using rule 35 (expr -> var .)
    DOTADD          reduce using rule 35 (expr -> var .)
    DOTDIV          reduce using rule 35 (expr -> var .)
    DOTMUL          reduce using rule 35 (expr -> var .)
    LESSEREQUAL     reduce using rule 35 (expr -> var .)
    GREATEREQUAL    reduce using rule 35 (expr -> var .)
    LESSER          reduce using rule 35 (expr -> var .)
    GREATER         reduce using rule 35 (expr -> var .)
    NOTEQUAL        reduce using rule 35 (expr -> var .)
    EQUAL           reduce using rule 35 (expr -> var .)
    /               reduce using rule 35 (expr -> var .)
    *               reduce using rule 35 (expr -> var .)
    -               reduce using rule 35 (expr -> var .)
    +               reduce using rule 35 (expr -> var .)
    ;               reduce using rule 35 (expr -> var .)
    )               reduce using rule 35 (expr -> var .)
    ]               reduce using rule 35 (expr -> var .)
    :               reduce using rule 35 (expr -> var .)
    {               reduce using rule 35 (expr -> var .)
    PRINT           reduce using rule 35 (expr -> var .)
    WHILE           reduce using rule 35 (expr -> var .)
    FOR             reduce using rule 35 (expr -> var .)
    CONTINUE        reduce using rule 35 (expr -> var .)
    BREAK           reduce using rule 35 (expr -> var .)
    RETURN          reduce using rule 35 (expr -> var .)
    IF              reduce using rule 35 (expr -> var .)
    ID              reduce using rule 35 (expr -> var .)


state 38

    (36) expr -> FLOATNUM .
    ,               reduce using rule 36 (expr -> FLOATNUM .)
    OR              reduce using rule 36 (expr -> FLOATNUM .)
    AND             reduce using rule 36 (expr -> FLOATNUM .)
    XOR             reduce using rule 36 (expr -> FLOATNUM .)
    DOTSUB          reduce using rule 36 (expr -> FLOATNUM .)
    DOTADD          reduce using rule 36 (expr -> FLOATNUM .)
    DOTDIV          reduce using rule 36 (expr -> FLOATNUM .)
    DOTMUL          reduce using rule 36 (expr -> FLOATNUM .)
    LESSEREQUAL     reduce using rule 36 (expr -> FLOATNUM .)
    GREATEREQUAL    reduce using rule 36 (expr -> FLOATNUM .)
    LESSER          reduce using rule 36 (expr -> FLOATNUM .)
    GREATER         reduce using rule 36 (expr -> FLOATNUM .)
    NOTEQUAL        reduce using rule 36 (expr -> FLOATNUM .)
    EQUAL           reduce using rule 36 (expr -> FLOATNUM .)
    /               reduce using rule 36 (expr -> FLOATNUM .)
    *               reduce using rule 36 (expr -> FLOATNUM .)
    -               reduce using rule 36 (expr -> FLOATNUM .)
    +               reduce using rule 36 (expr -> FLOATNUM .)
    ;               reduce using rule 36 (expr -> FLOATNUM .)
    )               reduce using rule 36 (expr -> FLOATNUM .)
    ]               reduce using rule 36 (expr -> FLOATNUM .)
    :               reduce using rule 36 (expr -> FLOATNUM .)
    {               reduce using rule 36 (expr -> FLOATNUM .)
    PRINT           reduce using rule 36 (expr -> FLOATNUM .)
    WHILE           reduce using rule 36 (expr -> FLOATNUM .)
    FOR             reduce using rule 36 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 36 (expr -> FLOATNUM .)
    BREAK           reduce using rule 36 (expr -> FLOATNUM .)
    RETURN          reduce using rule 36 (expr -> FLOATNUM .)
    IF              reduce using rule 36 (expr -> FLOATNUM .)
    ID              reduce using rule 36 (expr -> FLOATNUM .)


state 39

    (37) expr -> INTNUM .
    ,               reduce using rule 37 (expr -> INTNUM .)
    OR              reduce using rule 37 (expr -> INTNUM .)
    AND             reduce using rule 37 (expr -> INTNUM .)
    XOR             reduce using rule 37 (expr -> INTNUM .)
    DOTSUB          reduce using rule 37 (expr -> INTNUM .)
    DOTADD          reduce using rule 37 (expr -> INTNUM .)
    DOTDIV          reduce using rule 37 (expr -> INTNUM .)
    DOTMUL          reduce using rule 37 (expr -> INTNUM .)
    LESSEREQUAL     reduce using rule 37 (expr -> INTNUM .)
    GREATEREQUAL    reduce using rule 37 (expr -> INTNUM .)
    LESSER          reduce using rule 37 (expr -> INTNUM .)
    GREATER         reduce using rule 37 (expr -> INTNUM .)
    NOTEQUAL        reduce using rule 37 (expr -> INTNUM .)
    EQUAL           reduce using rule 37 (expr -> INTNUM .)
    /               reduce using rule 37 (expr -> INTNUM .)
    *               reduce using rule 37 (expr -> INTNUM .)
    -               reduce using rule 37 (expr -> INTNUM .)
    +               reduce using rule 37 (expr -> INTNUM .)
    ;               reduce using rule 37 (expr -> INTNUM .)
    )               reduce using rule 37 (expr -> INTNUM .)
    ]               reduce using rule 37 (expr -> INTNUM .)
    :               reduce using rule 37 (expr -> INTNUM .)
    {               reduce using rule 37 (expr -> INTNUM .)
    PRINT           reduce using rule 37 (expr -> INTNUM .)
    WHILE           reduce using rule 37 (expr -> INTNUM .)
    FOR             reduce using rule 37 (expr -> INTNUM .)
    CONTINUE        reduce using rule 37 (expr -> INTNUM .)
    BREAK           reduce using rule 37 (expr -> INTNUM .)
    RETURN          reduce using rule 37 (expr -> INTNUM .)
    IF              reduce using rule 37 (expr -> INTNUM .)
    ID              reduce using rule 37 (expr -> INTNUM .)


state 40

    (38) expr -> STRING .
    ,               reduce using rule 38 (expr -> STRING .)
    OR              reduce using rule 38 (expr -> STRING .)
    AND             reduce using rule 38 (expr -> STRING .)
    XOR             reduce using rule 38 (expr -> STRING .)
    DOTSUB          reduce using rule 38 (expr -> STRING .)
    DOTADD          reduce using rule 38 (expr -> STRING .)
    DOTDIV          reduce using rule 38 (expr -> STRING .)
    DOTMUL          reduce using rule 38 (expr -> STRING .)
    LESSEREQUAL     reduce using rule 38 (expr -> STRING .)
    GREATEREQUAL    reduce using rule 38 (expr -> STRING .)
    LESSER          reduce using rule 38 (expr -> STRING .)
    GREATER         reduce using rule 38 (expr -> STRING .)
    NOTEQUAL        reduce using rule 38 (expr -> STRING .)
    EQUAL           reduce using rule 38 (expr -> STRING .)
    /               reduce using rule 38 (expr -> STRING .)
    *               reduce using rule 38 (expr -> STRING .)
    -               reduce using rule 38 (expr -> STRING .)
    +               reduce using rule 38 (expr -> STRING .)
    ;               reduce using rule 38 (expr -> STRING .)
    )               reduce using rule 38 (expr -> STRING .)
    ]               reduce using rule 38 (expr -> STRING .)
    :               reduce using rule 38 (expr -> STRING .)
    {               reduce using rule 38 (expr -> STRING .)
    PRINT           reduce using rule 38 (expr -> STRING .)
    WHILE           reduce using rule 38 (expr -> STRING .)
    FOR             reduce using rule 38 (expr -> STRING .)
    CONTINUE        reduce using rule 38 (expr -> STRING .)
    BREAK           reduce using rule 38 (expr -> STRING .)
    RETURN          reduce using rule 38 (expr -> STRING .)
    IF              reduce using rule 38 (expr -> STRING .)
    ID              reduce using rule 38 (expr -> STRING .)


state 41

    (60) mat_fun -> ONES .
    (               reduce using rule 60 (mat_fun -> ONES .)


state 42

    (61) mat_fun -> EYE .
    (               reduce using rule 61 (mat_fun -> EYE .)


state 43

    (62) mat_fun -> ZEROS .
    (               reduce using rule 62 (mat_fun -> ZEROS .)


state 44

    (49) matrix -> [ . vectors ]
    (50) vectors -> . vector
    (51) vectors -> . vectors , vector
    (52) vector -> . [ variables ]
    [               shift and go to state 78

    vectors                        shift and go to state 79
    vector                         shift and go to state 80

state 45

    (47) unary -> NOT . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 81
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 46

    (42) assign -> var DIVASSIGN . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    var                            shift and go to state 37
    expr                           shift and go to state 82
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    matrix_element                 shift and go to state 22

state 47

    (43) assign -> var MULASSIGN . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    var                            shift and go to state 37
    expr                           shift and go to state 83
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    matrix_element                 shift and go to state 22

state 48

    (44) assign -> var SUBASSIGN . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    var                            shift and go to state 37
    expr                           shift and go to state 84
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    matrix_element                 shift and go to state 22

state 49

    (45) assign -> var ADDASSIGN . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    var                            shift and go to state 37
    expr                           shift and go to state 85
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    matrix_element                 shift and go to state 22

state 50

    (46) assign -> var = . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    var                            shift and go to state 37
    expr                           shift and go to state 86
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    matrix_element                 shift and go to state 22

state 51

    (65) while_l -> WHILE ( . expr ) instruction
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 87
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 52

    (66) for_l -> FOR ID . = expr : expr instruction
    =               shift and go to state 88


state 53

    (41) matrix_element -> ID [ . expr , expr ]
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 89
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 54

    (67) return_i -> RETURN expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ;               reduce using rule 67 (return_i -> RETURN expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 55

    (63) if_i -> IF ( . expr ) instruction ELSE instruction
    (64) if_i -> IF ( . expr ) instruction
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 90
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 56

    (5) instruction -> { instructions } .
    {               reduce using rule 5 (instruction -> { instructions } .)
    PRINT           reduce using rule 5 (instruction -> { instructions } .)
    WHILE           reduce using rule 5 (instruction -> { instructions } .)
    FOR             reduce using rule 5 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 5 (instruction -> { instructions } .)
    BREAK           reduce using rule 5 (instruction -> { instructions } .)
    RETURN          reduce using rule 5 (instruction -> { instructions } .)
    IF              reduce using rule 5 (instruction -> { instructions } .)
    ID              reduce using rule 5 (instruction -> { instructions } .)
    $end            reduce using rule 5 (instruction -> { instructions } .)
    }               reduce using rule 5 (instruction -> { instructions } .)
    ELSE            reduce using rule 5 (instruction -> { instructions } .)


state 57

    (73) printargs -> expr , . printargs
    (72) printargs -> . expr
    (73) printargs -> . expr , printargs
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 31
    printargs                      shift and go to state 91
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 58

    (17) expr -> expr OR . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 92
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 59

    (18) expr -> expr AND . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 93
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 60

    (19) expr -> expr XOR . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 94
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 61

    (20) expr -> expr DOTSUB . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 95
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 62

    (21) expr -> expr DOTADD . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 96
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 63

    (22) expr -> expr DOTDIV . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 97
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 64

    (23) expr -> expr DOTMUL . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 98
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 65

    (24) expr -> expr LESSEREQUAL . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 99
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 66

    (25) expr -> expr GREATEREQUAL . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 100
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 67

    (26) expr -> expr LESSER . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 101
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 68

    (27) expr -> expr GREATER . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 102
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 69

    (28) expr -> expr NOTEQUAL . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 103
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 70

    (29) expr -> expr EQUAL . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 104
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 71

    (30) expr -> expr / . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 105
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 72

    (31) expr -> expr * . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 106
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 73

    (32) expr -> expr - . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 107
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 74

    (33) expr -> expr + . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 108
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 75

    (14) expr -> mat_fun ( . expr )
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    mat_fun                        shift and go to state 32
    expr                           shift and go to state 109
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 76

    (34) expr -> ( expr . )
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 110
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 77

    (48) unary -> - expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 48 (unary -> - expr .)
    OR              reduce using rule 48 (unary -> - expr .)
    AND             reduce using rule 48 (unary -> - expr .)
    XOR             reduce using rule 48 (unary -> - expr .)
    DOTSUB          reduce using rule 48 (unary -> - expr .)
    DOTADD          reduce using rule 48 (unary -> - expr .)
    DOTDIV          reduce using rule 48 (unary -> - expr .)
    DOTMUL          reduce using rule 48 (unary -> - expr .)
    LESSEREQUAL     reduce using rule 48 (unary -> - expr .)
    GREATEREQUAL    reduce using rule 48 (unary -> - expr .)
    LESSER          reduce using rule 48 (unary -> - expr .)
    GREATER         reduce using rule 48 (unary -> - expr .)
    NOTEQUAL        reduce using rule 48 (unary -> - expr .)
    EQUAL           reduce using rule 48 (unary -> - expr .)
    /               reduce using rule 48 (unary -> - expr .)
    *               reduce using rule 48 (unary -> - expr .)
    -               reduce using rule 48 (unary -> - expr .)
    +               reduce using rule 48 (unary -> - expr .)
    ;               reduce using rule 48 (unary -> - expr .)
    )               reduce using rule 48 (unary -> - expr .)
    ]               reduce using rule 48 (unary -> - expr .)
    :               reduce using rule 48 (unary -> - expr .)
    {               reduce using rule 48 (unary -> - expr .)
    PRINT           reduce using rule 48 (unary -> - expr .)
    WHILE           reduce using rule 48 (unary -> - expr .)
    FOR             reduce using rule 48 (unary -> - expr .)
    CONTINUE        reduce using rule 48 (unary -> - expr .)
    BREAK           reduce using rule 48 (unary -> - expr .)
    RETURN          reduce using rule 48 (unary -> - expr .)
    IF              reduce using rule 48 (unary -> - expr .)
    ID              reduce using rule 48 (unary -> - expr .)


state 78

    (52) vector -> [ . variables ]
    (53) variables -> . variable
    (54) variables -> . variables , variable
    (55) variable -> . ID [ expr : ]
    (56) variable -> . ID [ : expr ]
    (57) variable -> . ID [ expr : expr , expr : expr ]
    (58) variable -> . ID [ expr : expr ]
    (59) variable -> . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    ID              shift and go to state 113
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36

    variables                      shift and go to state 111
    variable                       shift and go to state 112
    expr                           shift and go to state 114
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 79

    (49) matrix -> [ vectors . ]
    (51) vectors -> vectors . , vector
    ]               shift and go to state 115
    ,               shift and go to state 116


state 80

    (50) vectors -> vector .
    ]               reduce using rule 50 (vectors -> vector .)
    ,               reduce using rule 50 (vectors -> vector .)


state 81

    (47) unary -> NOT expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 47 (unary -> NOT expr .)
    OR              reduce using rule 47 (unary -> NOT expr .)
    AND             reduce using rule 47 (unary -> NOT expr .)
    XOR             reduce using rule 47 (unary -> NOT expr .)
    DOTSUB          reduce using rule 47 (unary -> NOT expr .)
    DOTADD          reduce using rule 47 (unary -> NOT expr .)
    DOTDIV          reduce using rule 47 (unary -> NOT expr .)
    DOTMUL          reduce using rule 47 (unary -> NOT expr .)
    LESSEREQUAL     reduce using rule 47 (unary -> NOT expr .)
    GREATEREQUAL    reduce using rule 47 (unary -> NOT expr .)
    LESSER          reduce using rule 47 (unary -> NOT expr .)
    GREATER         reduce using rule 47 (unary -> NOT expr .)
    NOTEQUAL        reduce using rule 47 (unary -> NOT expr .)
    EQUAL           reduce using rule 47 (unary -> NOT expr .)
    /               reduce using rule 47 (unary -> NOT expr .)
    *               reduce using rule 47 (unary -> NOT expr .)
    -               reduce using rule 47 (unary -> NOT expr .)
    +               reduce using rule 47 (unary -> NOT expr .)
    ;               reduce using rule 47 (unary -> NOT expr .)
    )               reduce using rule 47 (unary -> NOT expr .)
    ]               reduce using rule 47 (unary -> NOT expr .)
    :               reduce using rule 47 (unary -> NOT expr .)
    {               reduce using rule 47 (unary -> NOT expr .)
    PRINT           reduce using rule 47 (unary -> NOT expr .)
    WHILE           reduce using rule 47 (unary -> NOT expr .)
    FOR             reduce using rule 47 (unary -> NOT expr .)
    CONTINUE        reduce using rule 47 (unary -> NOT expr .)
    BREAK           reduce using rule 47 (unary -> NOT expr .)
    RETURN          reduce using rule 47 (unary -> NOT expr .)
    IF              reduce using rule 47 (unary -> NOT expr .)
    ID              reduce using rule 47 (unary -> NOT expr .)


state 82

    (42) assign -> var DIVASSIGN expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ;               reduce using rule 42 (assign -> var DIVASSIGN expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 83

    (43) assign -> var MULASSIGN expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ;               reduce using rule 43 (assign -> var MULASSIGN expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 84

    (44) assign -> var SUBASSIGN expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ;               reduce using rule 44 (assign -> var SUBASSIGN expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 85

    (45) assign -> var ADDASSIGN expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ;               reduce using rule 45 (assign -> var ADDASSIGN expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 86

    (46) assign -> var = expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ;               reduce using rule 46 (assign -> var = expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 87

    (65) while_l -> WHILE ( expr . ) instruction
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 117
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 88

    (66) for_l -> FOR ID = . expr : expr instruction
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 118
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 89

    (41) matrix_element -> ID [ expr . , expr ]
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               shift and go to state 119
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 90

    (63) if_i -> IF ( expr . ) instruction ELSE instruction
    (64) if_i -> IF ( expr . ) instruction
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 120
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 91

    (73) printargs -> expr , printargs .
    ;               reduce using rule 73 (printargs -> expr , printargs .)


state 92

    (17) expr -> expr OR expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 17 (expr -> expr OR expr .)
    OR              reduce using rule 17 (expr -> expr OR expr .)
    AND             reduce using rule 17 (expr -> expr OR expr .)
    XOR             reduce using rule 17 (expr -> expr OR expr .)
    LESSEREQUAL     reduce using rule 17 (expr -> expr OR expr .)
    GREATEREQUAL    reduce using rule 17 (expr -> expr OR expr .)
    LESSER          reduce using rule 17 (expr -> expr OR expr .)
    GREATER         reduce using rule 17 (expr -> expr OR expr .)
    NOTEQUAL        reduce using rule 17 (expr -> expr OR expr .)
    EQUAL           reduce using rule 17 (expr -> expr OR expr .)
    ;               reduce using rule 17 (expr -> expr OR expr .)
    )               reduce using rule 17 (expr -> expr OR expr .)
    ]               reduce using rule 17 (expr -> expr OR expr .)
    :               reduce using rule 17 (expr -> expr OR expr .)
    {               reduce using rule 17 (expr -> expr OR expr .)
    PRINT           reduce using rule 17 (expr -> expr OR expr .)
    WHILE           reduce using rule 17 (expr -> expr OR expr .)
    FOR             reduce using rule 17 (expr -> expr OR expr .)
    CONTINUE        reduce using rule 17 (expr -> expr OR expr .)
    BREAK           reduce using rule 17 (expr -> expr OR expr .)
    RETURN          reduce using rule 17 (expr -> expr OR expr .)
    IF              reduce using rule 17 (expr -> expr OR expr .)
    ID              reduce using rule 17 (expr -> expr OR expr .)
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 93

    (18) expr -> expr AND expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 18 (expr -> expr AND expr .)
    OR              reduce using rule 18 (expr -> expr AND expr .)
    AND             reduce using rule 18 (expr -> expr AND expr .)
    XOR             reduce using rule 18 (expr -> expr AND expr .)
    LESSEREQUAL     reduce using rule 18 (expr -> expr AND expr .)
    GREATEREQUAL    reduce using rule 18 (expr -> expr AND expr .)
    LESSER          reduce using rule 18 (expr -> expr AND expr .)
    GREATER         reduce using rule 18 (expr -> expr AND expr .)
    NOTEQUAL        reduce using rule 18 (expr -> expr AND expr .)
    EQUAL           reduce using rule 18 (expr -> expr AND expr .)
    ;               reduce using rule 18 (expr -> expr AND expr .)
    )               reduce using rule 18 (expr -> expr AND expr .)
    ]               reduce using rule 18 (expr -> expr AND expr .)
    :               reduce using rule 18 (expr -> expr AND expr .)
    {               reduce using rule 18 (expr -> expr AND expr .)
    PRINT           reduce using rule 18 (expr -> expr AND expr .)
    WHILE           reduce using rule 18 (expr -> expr AND expr .)
    FOR             reduce using rule 18 (expr -> expr AND expr .)
    CONTINUE        reduce using rule 18 (expr -> expr AND expr .)
    BREAK           reduce using rule 18 (expr -> expr AND expr .)
    RETURN          reduce using rule 18 (expr -> expr AND expr .)
    IF              reduce using rule 18 (expr -> expr AND expr .)
    ID              reduce using rule 18 (expr -> expr AND expr .)
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 94

    (19) expr -> expr XOR expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 19 (expr -> expr XOR expr .)
    OR              reduce using rule 19 (expr -> expr XOR expr .)
    AND             reduce using rule 19 (expr -> expr XOR expr .)
    XOR             reduce using rule 19 (expr -> expr XOR expr .)
    LESSEREQUAL     reduce using rule 19 (expr -> expr XOR expr .)
    GREATEREQUAL    reduce using rule 19 (expr -> expr XOR expr .)
    LESSER          reduce using rule 19 (expr -> expr XOR expr .)
    GREATER         reduce using rule 19 (expr -> expr XOR expr .)
    NOTEQUAL        reduce using rule 19 (expr -> expr XOR expr .)
    EQUAL           reduce using rule 19 (expr -> expr XOR expr .)
    ;               reduce using rule 19 (expr -> expr XOR expr .)
    )               reduce using rule 19 (expr -> expr XOR expr .)
    ]               reduce using rule 19 (expr -> expr XOR expr .)
    :               reduce using rule 19 (expr -> expr XOR expr .)
    {               reduce using rule 19 (expr -> expr XOR expr .)
    PRINT           reduce using rule 19 (expr -> expr XOR expr .)
    WHILE           reduce using rule 19 (expr -> expr XOR expr .)
    FOR             reduce using rule 19 (expr -> expr XOR expr .)
    CONTINUE        reduce using rule 19 (expr -> expr XOR expr .)
    BREAK           reduce using rule 19 (expr -> expr XOR expr .)
    RETURN          reduce using rule 19 (expr -> expr XOR expr .)
    IF              reduce using rule 19 (expr -> expr XOR expr .)
    ID              reduce using rule 19 (expr -> expr XOR expr .)
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 95

    (20) expr -> expr DOTSUB expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 20 (expr -> expr DOTSUB expr .)
    OR              reduce using rule 20 (expr -> expr DOTSUB expr .)
    AND             reduce using rule 20 (expr -> expr DOTSUB expr .)
    XOR             reduce using rule 20 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 20 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 20 (expr -> expr DOTSUB expr .)
    LESSEREQUAL     reduce using rule 20 (expr -> expr DOTSUB expr .)
    GREATEREQUAL    reduce using rule 20 (expr -> expr DOTSUB expr .)
    LESSER          reduce using rule 20 (expr -> expr DOTSUB expr .)
    GREATER         reduce using rule 20 (expr -> expr DOTSUB expr .)
    NOTEQUAL        reduce using rule 20 (expr -> expr DOTSUB expr .)
    EQUAL           reduce using rule 20 (expr -> expr DOTSUB expr .)
    -               reduce using rule 20 (expr -> expr DOTSUB expr .)
    +               reduce using rule 20 (expr -> expr DOTSUB expr .)
    ;               reduce using rule 20 (expr -> expr DOTSUB expr .)
    )               reduce using rule 20 (expr -> expr DOTSUB expr .)
    ]               reduce using rule 20 (expr -> expr DOTSUB expr .)
    :               reduce using rule 20 (expr -> expr DOTSUB expr .)
    {               reduce using rule 20 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 20 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 20 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 20 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 20 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 20 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 20 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 20 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 20 (expr -> expr DOTSUB expr .)
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72


state 96

    (21) expr -> expr DOTADD expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 21 (expr -> expr DOTADD expr .)
    OR              reduce using rule 21 (expr -> expr DOTADD expr .)
    AND             reduce using rule 21 (expr -> expr DOTADD expr .)
    XOR             reduce using rule 21 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 21 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 21 (expr -> expr DOTADD expr .)
    LESSEREQUAL     reduce using rule 21 (expr -> expr DOTADD expr .)
    GREATEREQUAL    reduce using rule 21 (expr -> expr DOTADD expr .)
    LESSER          reduce using rule 21 (expr -> expr DOTADD expr .)
    GREATER         reduce using rule 21 (expr -> expr DOTADD expr .)
    NOTEQUAL        reduce using rule 21 (expr -> expr DOTADD expr .)
    EQUAL           reduce using rule 21 (expr -> expr DOTADD expr .)
    -               reduce using rule 21 (expr -> expr DOTADD expr .)
    +               reduce using rule 21 (expr -> expr DOTADD expr .)
    ;               reduce using rule 21 (expr -> expr DOTADD expr .)
    )               reduce using rule 21 (expr -> expr DOTADD expr .)
    ]               reduce using rule 21 (expr -> expr DOTADD expr .)
    :               reduce using rule 21 (expr -> expr DOTADD expr .)
    {               reduce using rule 21 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 21 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 21 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 21 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 21 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 21 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 21 (expr -> expr DOTADD expr .)
    IF              reduce using rule 21 (expr -> expr DOTADD expr .)
    ID              reduce using rule 21 (expr -> expr DOTADD expr .)
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72


state 97

    (22) expr -> expr DOTDIV expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 22 (expr -> expr DOTDIV expr .)
    OR              reduce using rule 22 (expr -> expr DOTDIV expr .)
    AND             reduce using rule 22 (expr -> expr DOTDIV expr .)
    XOR             reduce using rule 22 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 22 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 22 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 22 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 22 (expr -> expr DOTDIV expr .)
    LESSEREQUAL     reduce using rule 22 (expr -> expr DOTDIV expr .)
    GREATEREQUAL    reduce using rule 22 (expr -> expr DOTDIV expr .)
    LESSER          reduce using rule 22 (expr -> expr DOTDIV expr .)
    GREATER         reduce using rule 22 (expr -> expr DOTDIV expr .)
    NOTEQUAL        reduce using rule 22 (expr -> expr DOTDIV expr .)
    EQUAL           reduce using rule 22 (expr -> expr DOTDIV expr .)
    /               reduce using rule 22 (expr -> expr DOTDIV expr .)
    *               reduce using rule 22 (expr -> expr DOTDIV expr .)
    -               reduce using rule 22 (expr -> expr DOTDIV expr .)
    +               reduce using rule 22 (expr -> expr DOTDIV expr .)
    ;               reduce using rule 22 (expr -> expr DOTDIV expr .)
    )               reduce using rule 22 (expr -> expr DOTDIV expr .)
    ]               reduce using rule 22 (expr -> expr DOTDIV expr .)
    :               reduce using rule 22 (expr -> expr DOTDIV expr .)
    {               reduce using rule 22 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 22 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 22 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 22 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 22 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 22 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 22 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 22 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 22 (expr -> expr DOTDIV expr .)


state 98

    (23) expr -> expr DOTMUL expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 23 (expr -> expr DOTMUL expr .)
    OR              reduce using rule 23 (expr -> expr DOTMUL expr .)
    AND             reduce using rule 23 (expr -> expr DOTMUL expr .)
    XOR             reduce using rule 23 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 23 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 23 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 23 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 23 (expr -> expr DOTMUL expr .)
    LESSEREQUAL     reduce using rule 23 (expr -> expr DOTMUL expr .)
    GREATEREQUAL    reduce using rule 23 (expr -> expr DOTMUL expr .)
    LESSER          reduce using rule 23 (expr -> expr DOTMUL expr .)
    GREATER         reduce using rule 23 (expr -> expr DOTMUL expr .)
    NOTEQUAL        reduce using rule 23 (expr -> expr DOTMUL expr .)
    EQUAL           reduce using rule 23 (expr -> expr DOTMUL expr .)
    /               reduce using rule 23 (expr -> expr DOTMUL expr .)
    *               reduce using rule 23 (expr -> expr DOTMUL expr .)
    -               reduce using rule 23 (expr -> expr DOTMUL expr .)
    +               reduce using rule 23 (expr -> expr DOTMUL expr .)
    ;               reduce using rule 23 (expr -> expr DOTMUL expr .)
    )               reduce using rule 23 (expr -> expr DOTMUL expr .)
    ]               reduce using rule 23 (expr -> expr DOTMUL expr .)
    :               reduce using rule 23 (expr -> expr DOTMUL expr .)
    {               reduce using rule 23 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 23 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 23 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 23 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 23 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 23 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 23 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 23 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 23 (expr -> expr DOTMUL expr .)


state 99

    (24) expr -> expr LESSEREQUAL expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    LESSEREQUAL     reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    GREATEREQUAL    reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    LESSER          reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    GREATER         reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    NOTEQUAL        reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    EQUAL           reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    ;               reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    )               reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    ]               reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    :               reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    {               reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    PRINT           reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    WHILE           reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    FOR             reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    CONTINUE        reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    BREAK           reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    RETURN          reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    IF              reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    ID              reduce using rule 24 (expr -> expr LESSEREQUAL expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 100

    (25) expr -> expr GREATEREQUAL expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    LESSEREQUAL     reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    GREATEREQUAL    reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    LESSER          reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    GREATER         reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    NOTEQUAL        reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    EQUAL           reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    ;               reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    )               reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    ]               reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    :               reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    {               reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    PRINT           reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    WHILE           reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    FOR             reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    CONTINUE        reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    BREAK           reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    RETURN          reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    IF              reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    ID              reduce using rule 25 (expr -> expr GREATEREQUAL expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 101

    (26) expr -> expr LESSER expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 26 (expr -> expr LESSER expr .)
    LESSEREQUAL     reduce using rule 26 (expr -> expr LESSER expr .)
    GREATEREQUAL    reduce using rule 26 (expr -> expr LESSER expr .)
    LESSER          reduce using rule 26 (expr -> expr LESSER expr .)
    GREATER         reduce using rule 26 (expr -> expr LESSER expr .)
    NOTEQUAL        reduce using rule 26 (expr -> expr LESSER expr .)
    EQUAL           reduce using rule 26 (expr -> expr LESSER expr .)
    ;               reduce using rule 26 (expr -> expr LESSER expr .)
    )               reduce using rule 26 (expr -> expr LESSER expr .)
    ]               reduce using rule 26 (expr -> expr LESSER expr .)
    :               reduce using rule 26 (expr -> expr LESSER expr .)
    {               reduce using rule 26 (expr -> expr LESSER expr .)
    PRINT           reduce using rule 26 (expr -> expr LESSER expr .)
    WHILE           reduce using rule 26 (expr -> expr LESSER expr .)
    FOR             reduce using rule 26 (expr -> expr LESSER expr .)
    CONTINUE        reduce using rule 26 (expr -> expr LESSER expr .)
    BREAK           reduce using rule 26 (expr -> expr LESSER expr .)
    RETURN          reduce using rule 26 (expr -> expr LESSER expr .)
    IF              reduce using rule 26 (expr -> expr LESSER expr .)
    ID              reduce using rule 26 (expr -> expr LESSER expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 102

    (27) expr -> expr GREATER expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 27 (expr -> expr GREATER expr .)
    LESSEREQUAL     reduce using rule 27 (expr -> expr GREATER expr .)
    GREATEREQUAL    reduce using rule 27 (expr -> expr GREATER expr .)
    LESSER          reduce using rule 27 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 27 (expr -> expr GREATER expr .)
    NOTEQUAL        reduce using rule 27 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 27 (expr -> expr GREATER expr .)
    ;               reduce using rule 27 (expr -> expr GREATER expr .)
    )               reduce using rule 27 (expr -> expr GREATER expr .)
    ]               reduce using rule 27 (expr -> expr GREATER expr .)
    :               reduce using rule 27 (expr -> expr GREATER expr .)
    {               reduce using rule 27 (expr -> expr GREATER expr .)
    PRINT           reduce using rule 27 (expr -> expr GREATER expr .)
    WHILE           reduce using rule 27 (expr -> expr GREATER expr .)
    FOR             reduce using rule 27 (expr -> expr GREATER expr .)
    CONTINUE        reduce using rule 27 (expr -> expr GREATER expr .)
    BREAK           reduce using rule 27 (expr -> expr GREATER expr .)
    RETURN          reduce using rule 27 (expr -> expr GREATER expr .)
    IF              reduce using rule 27 (expr -> expr GREATER expr .)
    ID              reduce using rule 27 (expr -> expr GREATER expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 103

    (28) expr -> expr NOTEQUAL expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    LESSEREQUAL     reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    GREATEREQUAL    reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    LESSER          reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    GREATER         reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    NOTEQUAL        reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    EQUAL           reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    ;               reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    )               reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    ]               reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    :               reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    {               reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    PRINT           reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    WHILE           reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    FOR             reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    CONTINUE        reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    BREAK           reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    RETURN          reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    IF              reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    ID              reduce using rule 28 (expr -> expr NOTEQUAL expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 104

    (29) expr -> expr EQUAL expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 29 (expr -> expr EQUAL expr .)
    LESSEREQUAL     reduce using rule 29 (expr -> expr EQUAL expr .)
    GREATEREQUAL    reduce using rule 29 (expr -> expr EQUAL expr .)
    LESSER          reduce using rule 29 (expr -> expr EQUAL expr .)
    GREATER         reduce using rule 29 (expr -> expr EQUAL expr .)
    NOTEQUAL        reduce using rule 29 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 29 (expr -> expr EQUAL expr .)
    ;               reduce using rule 29 (expr -> expr EQUAL expr .)
    )               reduce using rule 29 (expr -> expr EQUAL expr .)
    ]               reduce using rule 29 (expr -> expr EQUAL expr .)
    :               reduce using rule 29 (expr -> expr EQUAL expr .)
    {               reduce using rule 29 (expr -> expr EQUAL expr .)
    PRINT           reduce using rule 29 (expr -> expr EQUAL expr .)
    WHILE           reduce using rule 29 (expr -> expr EQUAL expr .)
    FOR             reduce using rule 29 (expr -> expr EQUAL expr .)
    CONTINUE        reduce using rule 29 (expr -> expr EQUAL expr .)
    BREAK           reduce using rule 29 (expr -> expr EQUAL expr .)
    RETURN          reduce using rule 29 (expr -> expr EQUAL expr .)
    IF              reduce using rule 29 (expr -> expr EQUAL expr .)
    ID              reduce using rule 29 (expr -> expr EQUAL expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 105

    (30) expr -> expr / expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 30 (expr -> expr / expr .)
    OR              reduce using rule 30 (expr -> expr / expr .)
    AND             reduce using rule 30 (expr -> expr / expr .)
    XOR             reduce using rule 30 (expr -> expr / expr .)
    DOTSUB          reduce using rule 30 (expr -> expr / expr .)
    DOTADD          reduce using rule 30 (expr -> expr / expr .)
    DOTDIV          reduce using rule 30 (expr -> expr / expr .)
    DOTMUL          reduce using rule 30 (expr -> expr / expr .)
    LESSEREQUAL     reduce using rule 30 (expr -> expr / expr .)
    GREATEREQUAL    reduce using rule 30 (expr -> expr / expr .)
    LESSER          reduce using rule 30 (expr -> expr / expr .)
    GREATER         reduce using rule 30 (expr -> expr / expr .)
    NOTEQUAL        reduce using rule 30 (expr -> expr / expr .)
    EQUAL           reduce using rule 30 (expr -> expr / expr .)
    /               reduce using rule 30 (expr -> expr / expr .)
    *               reduce using rule 30 (expr -> expr / expr .)
    -               reduce using rule 30 (expr -> expr / expr .)
    +               reduce using rule 30 (expr -> expr / expr .)
    ;               reduce using rule 30 (expr -> expr / expr .)
    )               reduce using rule 30 (expr -> expr / expr .)
    ]               reduce using rule 30 (expr -> expr / expr .)
    :               reduce using rule 30 (expr -> expr / expr .)
    {               reduce using rule 30 (expr -> expr / expr .)
    PRINT           reduce using rule 30 (expr -> expr / expr .)
    WHILE           reduce using rule 30 (expr -> expr / expr .)
    FOR             reduce using rule 30 (expr -> expr / expr .)
    CONTINUE        reduce using rule 30 (expr -> expr / expr .)
    BREAK           reduce using rule 30 (expr -> expr / expr .)
    RETURN          reduce using rule 30 (expr -> expr / expr .)
    IF              reduce using rule 30 (expr -> expr / expr .)
    ID              reduce using rule 30 (expr -> expr / expr .)


state 106

    (31) expr -> expr * expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 31 (expr -> expr * expr .)
    OR              reduce using rule 31 (expr -> expr * expr .)
    AND             reduce using rule 31 (expr -> expr * expr .)
    XOR             reduce using rule 31 (expr -> expr * expr .)
    DOTSUB          reduce using rule 31 (expr -> expr * expr .)
    DOTADD          reduce using rule 31 (expr -> expr * expr .)
    DOTDIV          reduce using rule 31 (expr -> expr * expr .)
    DOTMUL          reduce using rule 31 (expr -> expr * expr .)
    LESSEREQUAL     reduce using rule 31 (expr -> expr * expr .)
    GREATEREQUAL    reduce using rule 31 (expr -> expr * expr .)
    LESSER          reduce using rule 31 (expr -> expr * expr .)
    GREATER         reduce using rule 31 (expr -> expr * expr .)
    NOTEQUAL        reduce using rule 31 (expr -> expr * expr .)
    EQUAL           reduce using rule 31 (expr -> expr * expr .)
    /               reduce using rule 31 (expr -> expr * expr .)
    *               reduce using rule 31 (expr -> expr * expr .)
    -               reduce using rule 31 (expr -> expr * expr .)
    +               reduce using rule 31 (expr -> expr * expr .)
    ;               reduce using rule 31 (expr -> expr * expr .)
    )               reduce using rule 31 (expr -> expr * expr .)
    ]               reduce using rule 31 (expr -> expr * expr .)
    :               reduce using rule 31 (expr -> expr * expr .)
    {               reduce using rule 31 (expr -> expr * expr .)
    PRINT           reduce using rule 31 (expr -> expr * expr .)
    WHILE           reduce using rule 31 (expr -> expr * expr .)
    FOR             reduce using rule 31 (expr -> expr * expr .)
    CONTINUE        reduce using rule 31 (expr -> expr * expr .)
    BREAK           reduce using rule 31 (expr -> expr * expr .)
    RETURN          reduce using rule 31 (expr -> expr * expr .)
    IF              reduce using rule 31 (expr -> expr * expr .)
    ID              reduce using rule 31 (expr -> expr * expr .)


state 107

    (32) expr -> expr - expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 32 (expr -> expr - expr .)
    OR              reduce using rule 32 (expr -> expr - expr .)
    AND             reduce using rule 32 (expr -> expr - expr .)
    XOR             reduce using rule 32 (expr -> expr - expr .)
    DOTSUB          reduce using rule 32 (expr -> expr - expr .)
    DOTADD          reduce using rule 32 (expr -> expr - expr .)
    LESSEREQUAL     reduce using rule 32 (expr -> expr - expr .)
    GREATEREQUAL    reduce using rule 32 (expr -> expr - expr .)
    LESSER          reduce using rule 32 (expr -> expr - expr .)
    GREATER         reduce using rule 32 (expr -> expr - expr .)
    NOTEQUAL        reduce using rule 32 (expr -> expr - expr .)
    EQUAL           reduce using rule 32 (expr -> expr - expr .)
    -               reduce using rule 32 (expr -> expr - expr .)
    +               reduce using rule 32 (expr -> expr - expr .)
    ;               reduce using rule 32 (expr -> expr - expr .)
    )               reduce using rule 32 (expr -> expr - expr .)
    ]               reduce using rule 32 (expr -> expr - expr .)
    :               reduce using rule 32 (expr -> expr - expr .)
    {               reduce using rule 32 (expr -> expr - expr .)
    PRINT           reduce using rule 32 (expr -> expr - expr .)
    WHILE           reduce using rule 32 (expr -> expr - expr .)
    FOR             reduce using rule 32 (expr -> expr - expr .)
    CONTINUE        reduce using rule 32 (expr -> expr - expr .)
    BREAK           reduce using rule 32 (expr -> expr - expr .)
    RETURN          reduce using rule 32 (expr -> expr - expr .)
    IF              reduce using rule 32 (expr -> expr - expr .)
    ID              reduce using rule 32 (expr -> expr - expr .)
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72


state 108

    (33) expr -> expr + expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               reduce using rule 33 (expr -> expr + expr .)
    OR              reduce using rule 33 (expr -> expr + expr .)
    AND             reduce using rule 33 (expr -> expr + expr .)
    XOR             reduce using rule 33 (expr -> expr + expr .)
    DOTSUB          reduce using rule 33 (expr -> expr + expr .)
    DOTADD          reduce using rule 33 (expr -> expr + expr .)
    LESSEREQUAL     reduce using rule 33 (expr -> expr + expr .)
    GREATEREQUAL    reduce using rule 33 (expr -> expr + expr .)
    LESSER          reduce using rule 33 (expr -> expr + expr .)
    GREATER         reduce using rule 33 (expr -> expr + expr .)
    NOTEQUAL        reduce using rule 33 (expr -> expr + expr .)
    EQUAL           reduce using rule 33 (expr -> expr + expr .)
    -               reduce using rule 33 (expr -> expr + expr .)
    +               reduce using rule 33 (expr -> expr + expr .)
    ;               reduce using rule 33 (expr -> expr + expr .)
    )               reduce using rule 33 (expr -> expr + expr .)
    ]               reduce using rule 33 (expr -> expr + expr .)
    :               reduce using rule 33 (expr -> expr + expr .)
    {               reduce using rule 33 (expr -> expr + expr .)
    PRINT           reduce using rule 33 (expr -> expr + expr .)
    WHILE           reduce using rule 33 (expr -> expr + expr .)
    FOR             reduce using rule 33 (expr -> expr + expr .)
    CONTINUE        reduce using rule 33 (expr -> expr + expr .)
    BREAK           reduce using rule 33 (expr -> expr + expr .)
    RETURN          reduce using rule 33 (expr -> expr + expr .)
    IF              reduce using rule 33 (expr -> expr + expr .)
    ID              reduce using rule 33 (expr -> expr + expr .)
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    /               shift and go to state 71
    *               shift and go to state 72


state 109

    (14) expr -> mat_fun ( expr . )
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 121
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 110

    (34) expr -> ( expr ) .
    ,               reduce using rule 34 (expr -> ( expr ) .)
    OR              reduce using rule 34 (expr -> ( expr ) .)
    AND             reduce using rule 34 (expr -> ( expr ) .)
    XOR             reduce using rule 34 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 34 (expr -> ( expr ) .)
    DOTADD          reduce using rule 34 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 34 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 34 (expr -> ( expr ) .)
    LESSEREQUAL     reduce using rule 34 (expr -> ( expr ) .)
    GREATEREQUAL    reduce using rule 34 (expr -> ( expr ) .)
    LESSER          reduce using rule 34 (expr -> ( expr ) .)
    GREATER         reduce using rule 34 (expr -> ( expr ) .)
    NOTEQUAL        reduce using rule 34 (expr -> ( expr ) .)
    EQUAL           reduce using rule 34 (expr -> ( expr ) .)
    /               reduce using rule 34 (expr -> ( expr ) .)
    *               reduce using rule 34 (expr -> ( expr ) .)
    -               reduce using rule 34 (expr -> ( expr ) .)
    +               reduce using rule 34 (expr -> ( expr ) .)
    ;               reduce using rule 34 (expr -> ( expr ) .)
    )               reduce using rule 34 (expr -> ( expr ) .)
    ]               reduce using rule 34 (expr -> ( expr ) .)
    :               reduce using rule 34 (expr -> ( expr ) .)
    {               reduce using rule 34 (expr -> ( expr ) .)
    PRINT           reduce using rule 34 (expr -> ( expr ) .)
    WHILE           reduce using rule 34 (expr -> ( expr ) .)
    FOR             reduce using rule 34 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 34 (expr -> ( expr ) .)
    BREAK           reduce using rule 34 (expr -> ( expr ) .)
    RETURN          reduce using rule 34 (expr -> ( expr ) .)
    IF              reduce using rule 34 (expr -> ( expr ) .)
    ID              reduce using rule 34 (expr -> ( expr ) .)


state 111

    (52) vector -> [ variables . ]
    (54) variables -> variables . , variable
    ]               shift and go to state 122
    ,               shift and go to state 123


state 112

    (53) variables -> variable .
    ]               reduce using rule 53 (variables -> variable .)
    ,               reduce using rule 53 (variables -> variable .)


state 113

    (55) variable -> ID . [ expr : ]
    (56) variable -> ID . [ : expr ]
    (57) variable -> ID . [ expr : expr , expr : expr ]
    (58) variable -> ID . [ expr : expr ]
    (39) var -> ID .
    (41) matrix_element -> ID . [ expr , expr ]
    [               shift and go to state 124
    OR              reduce using rule 39 (var -> ID .)
    AND             reduce using rule 39 (var -> ID .)
    XOR             reduce using rule 39 (var -> ID .)
    DOTSUB          reduce using rule 39 (var -> ID .)
    DOTADD          reduce using rule 39 (var -> ID .)
    DOTDIV          reduce using rule 39 (var -> ID .)
    DOTMUL          reduce using rule 39 (var -> ID .)
    LESSEREQUAL     reduce using rule 39 (var -> ID .)
    GREATEREQUAL    reduce using rule 39 (var -> ID .)
    LESSER          reduce using rule 39 (var -> ID .)
    GREATER         reduce using rule 39 (var -> ID .)
    NOTEQUAL        reduce using rule 39 (var -> ID .)
    EQUAL           reduce using rule 39 (var -> ID .)
    /               reduce using rule 39 (var -> ID .)
    *               reduce using rule 39 (var -> ID .)
    -               reduce using rule 39 (var -> ID .)
    +               reduce using rule 39 (var -> ID .)
    ]               reduce using rule 39 (var -> ID .)
    ,               reduce using rule 39 (var -> ID .)


state 114

    (59) variable -> expr .
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ]               reduce using rule 59 (variable -> expr .)
    ,               reduce using rule 59 (variable -> expr .)
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 115

    (49) matrix -> [ vectors ] .
    ,               reduce using rule 49 (matrix -> [ vectors ] .)
    OR              reduce using rule 49 (matrix -> [ vectors ] .)
    AND             reduce using rule 49 (matrix -> [ vectors ] .)
    XOR             reduce using rule 49 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 49 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 49 (matrix -> [ vectors ] .)
    DOTDIV          reduce using rule 49 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 49 (matrix -> [ vectors ] .)
    LESSEREQUAL     reduce using rule 49 (matrix -> [ vectors ] .)
    GREATEREQUAL    reduce using rule 49 (matrix -> [ vectors ] .)
    LESSER          reduce using rule 49 (matrix -> [ vectors ] .)
    GREATER         reduce using rule 49 (matrix -> [ vectors ] .)
    NOTEQUAL        reduce using rule 49 (matrix -> [ vectors ] .)
    EQUAL           reduce using rule 49 (matrix -> [ vectors ] .)
    /               reduce using rule 49 (matrix -> [ vectors ] .)
    *               reduce using rule 49 (matrix -> [ vectors ] .)
    -               reduce using rule 49 (matrix -> [ vectors ] .)
    +               reduce using rule 49 (matrix -> [ vectors ] .)
    ;               reduce using rule 49 (matrix -> [ vectors ] .)
    )               reduce using rule 49 (matrix -> [ vectors ] .)
    ]               reduce using rule 49 (matrix -> [ vectors ] .)
    :               reduce using rule 49 (matrix -> [ vectors ] .)
    {               reduce using rule 49 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 49 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 49 (matrix -> [ vectors ] .)
    FOR             reduce using rule 49 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 49 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 49 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 49 (matrix -> [ vectors ] .)
    IF              reduce using rule 49 (matrix -> [ vectors ] .)
    ID              reduce using rule 49 (matrix -> [ vectors ] .)


state 116

    (51) vectors -> vectors , . vector
    (52) vector -> . [ variables ]
    [               shift and go to state 78

    vector                         shift and go to state 125

state 117

    (65) while_l -> WHILE ( expr ) . instruction
    (5) instruction -> . { instructions }
    (6) instruction -> . print_i ;
    (7) instruction -> . assign ;
    (8) instruction -> . while_l
    (9) instruction -> . for_l
    (10) instruction -> . continue_i ;
    (11) instruction -> . break_i ;
    (12) instruction -> . return_i ;
    (13) instruction -> . if_i
    (71) print_i -> . PRINT printargs
    (42) assign -> . var DIVASSIGN expr
    (43) assign -> . var MULASSIGN expr
    (44) assign -> . var SUBASSIGN expr
    (45) assign -> . var ADDASSIGN expr
    (46) assign -> . var = expr
    (65) while_l -> . WHILE ( expr ) instruction
    (66) for_l -> . FOR ID = expr : expr instruction
    (70) continue_i -> . CONTINUE
    (69) break_i -> . BREAK
    (67) return_i -> . RETURN expr
    (68) return_i -> . RETURN
    (63) if_i -> . IF ( expr ) instruction ELSE instruction
    (64) if_i -> . IF ( expr ) instruction
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    {               shift and go to state 4
    PRINT           shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    RETURN          shift and go to state 20
    IF              shift and go to state 21
    ID              shift and go to state 17

    instruction                    shift and go to state 126
    print_i                        shift and go to state 5
    assign                         shift and go to state 6
    while_l                        shift and go to state 7
    for_l                          shift and go to state 8
    continue_i                     shift and go to state 9
    break_i                        shift and go to state 10
    return_i                       shift and go to state 11
    if_i                           shift and go to state 12
    var                            shift and go to state 14
    matrix_element                 shift and go to state 22

state 118

    (66) for_l -> FOR ID = expr . : expr instruction
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    :               shift and go to state 127
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 119

    (41) matrix_element -> ID [ expr , . expr ]
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 128
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 120

    (63) if_i -> IF ( expr ) . instruction ELSE instruction
    (64) if_i -> IF ( expr ) . instruction
    (5) instruction -> . { instructions }
    (6) instruction -> . print_i ;
    (7) instruction -> . assign ;
    (8) instruction -> . while_l
    (9) instruction -> . for_l
    (10) instruction -> . continue_i ;
    (11) instruction -> . break_i ;
    (12) instruction -> . return_i ;
    (13) instruction -> . if_i
    (71) print_i -> . PRINT printargs
    (42) assign -> . var DIVASSIGN expr
    (43) assign -> . var MULASSIGN expr
    (44) assign -> . var SUBASSIGN expr
    (45) assign -> . var ADDASSIGN expr
    (46) assign -> . var = expr
    (65) while_l -> . WHILE ( expr ) instruction
    (66) for_l -> . FOR ID = expr : expr instruction
    (70) continue_i -> . CONTINUE
    (69) break_i -> . BREAK
    (67) return_i -> . RETURN expr
    (68) return_i -> . RETURN
    (63) if_i -> . IF ( expr ) instruction ELSE instruction
    (64) if_i -> . IF ( expr ) instruction
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    {               shift and go to state 4
    PRINT           shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    RETURN          shift and go to state 20
    IF              shift and go to state 21
    ID              shift and go to state 17

    instruction                    shift and go to state 129
    print_i                        shift and go to state 5
    assign                         shift and go to state 6
    while_l                        shift and go to state 7
    for_l                          shift and go to state 8
    continue_i                     shift and go to state 9
    break_i                        shift and go to state 10
    return_i                       shift and go to state 11
    if_i                           shift and go to state 12
    var                            shift and go to state 14
    matrix_element                 shift and go to state 22

state 121

    (14) expr -> mat_fun ( expr ) .
    ,               reduce using rule 14 (expr -> mat_fun ( expr ) .)
    OR              reduce using rule 14 (expr -> mat_fun ( expr ) .)
    AND             reduce using rule 14 (expr -> mat_fun ( expr ) .)
    XOR             reduce using rule 14 (expr -> mat_fun ( expr ) .)
    DOTSUB          reduce using rule 14 (expr -> mat_fun ( expr ) .)
    DOTADD          reduce using rule 14 (expr -> mat_fun ( expr ) .)
    DOTDIV          reduce using rule 14 (expr -> mat_fun ( expr ) .)
    DOTMUL          reduce using rule 14 (expr -> mat_fun ( expr ) .)
    LESSEREQUAL     reduce using rule 14 (expr -> mat_fun ( expr ) .)
    GREATEREQUAL    reduce using rule 14 (expr -> mat_fun ( expr ) .)
    LESSER          reduce using rule 14 (expr -> mat_fun ( expr ) .)
    GREATER         reduce using rule 14 (expr -> mat_fun ( expr ) .)
    NOTEQUAL        reduce using rule 14 (expr -> mat_fun ( expr ) .)
    EQUAL           reduce using rule 14 (expr -> mat_fun ( expr ) .)
    /               reduce using rule 14 (expr -> mat_fun ( expr ) .)
    *               reduce using rule 14 (expr -> mat_fun ( expr ) .)
    -               reduce using rule 14 (expr -> mat_fun ( expr ) .)
    +               reduce using rule 14 (expr -> mat_fun ( expr ) .)
    ;               reduce using rule 14 (expr -> mat_fun ( expr ) .)
    )               reduce using rule 14 (expr -> mat_fun ( expr ) .)
    ]               reduce using rule 14 (expr -> mat_fun ( expr ) .)
    :               reduce using rule 14 (expr -> mat_fun ( expr ) .)
    {               reduce using rule 14 (expr -> mat_fun ( expr ) .)
    PRINT           reduce using rule 14 (expr -> mat_fun ( expr ) .)
    WHILE           reduce using rule 14 (expr -> mat_fun ( expr ) .)
    FOR             reduce using rule 14 (expr -> mat_fun ( expr ) .)
    CONTINUE        reduce using rule 14 (expr -> mat_fun ( expr ) .)
    BREAK           reduce using rule 14 (expr -> mat_fun ( expr ) .)
    RETURN          reduce using rule 14 (expr -> mat_fun ( expr ) .)
    IF              reduce using rule 14 (expr -> mat_fun ( expr ) .)
    ID              reduce using rule 14 (expr -> mat_fun ( expr ) .)


state 122

    (52) vector -> [ variables ] .
    ]               reduce using rule 52 (vector -> [ variables ] .)
    ,               reduce using rule 52 (vector -> [ variables ] .)


state 123

    (54) variables -> variables , . variable
    (55) variable -> . ID [ expr : ]
    (56) variable -> . ID [ : expr ]
    (57) variable -> . ID [ expr : expr , expr : expr ]
    (58) variable -> . ID [ expr : expr ]
    (59) variable -> . expr
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    ID              shift and go to state 113
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36

    variable                       shift and go to state 130
    expr                           shift and go to state 114
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 124

    (55) variable -> ID [ . expr : ]
    (56) variable -> ID [ . : expr ]
    (57) variable -> ID [ . expr : expr , expr : expr ]
    (58) variable -> ID [ . expr : expr ]
    (41) matrix_element -> ID [ . expr , expr ]
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    :               shift and go to state 132
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 131
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 125

    (51) vectors -> vectors , vector .
    ]               reduce using rule 51 (vectors -> vectors , vector .)
    ,               reduce using rule 51 (vectors -> vectors , vector .)


state 126

    (65) while_l -> WHILE ( expr ) instruction .
    {               reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    PRINT           reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    WHILE           reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    FOR             reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    CONTINUE        reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    BREAK           reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    RETURN          reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    IF              reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    ID              reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    $end            reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    }               reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)
    ELSE            reduce using rule 65 (while_l -> WHILE ( expr ) instruction .)


state 127

    (66) for_l -> FOR ID = expr : . expr instruction
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 133
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 128

    (41) matrix_element -> ID [ expr , expr . ]
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ]               shift and go to state 134
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 129

    (63) if_i -> IF ( expr ) instruction . ELSE instruction
    (64) if_i -> IF ( expr ) instruction .
    ELSE            shift and go to state 135
    {               reduce using rule 64 (if_i -> IF ( expr ) instruction .)
    PRINT           reduce using rule 64 (if_i -> IF ( expr ) instruction .)
    WHILE           reduce using rule 64 (if_i -> IF ( expr ) instruction .)
    FOR             reduce using rule 64 (if_i -> IF ( expr ) instruction .)
    CONTINUE        reduce using rule 64 (if_i -> IF ( expr ) instruction .)
    BREAK           reduce using rule 64 (if_i -> IF ( expr ) instruction .)
    RETURN          reduce using rule 64 (if_i -> IF ( expr ) instruction .)
    IF              reduce using rule 64 (if_i -> IF ( expr ) instruction .)
    ID              reduce using rule 64 (if_i -> IF ( expr ) instruction .)
    $end            reduce using rule 64 (if_i -> IF ( expr ) instruction .)
    }               reduce using rule 64 (if_i -> IF ( expr ) instruction .)


state 130

    (54) variables -> variables , variable .
    ]               reduce using rule 54 (variables -> variables , variable .)
    ,               reduce using rule 54 (variables -> variables , variable .)


state 131

    (55) variable -> ID [ expr . : ]
    (57) variable -> ID [ expr . : expr , expr : expr ]
    (58) variable -> ID [ expr . : expr ]
    (41) matrix_element -> ID [ expr . , expr ]
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    :               shift and go to state 136
    ,               shift and go to state 119
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 132

    (56) variable -> ID [ : . expr ]
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 137
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 133

    (66) for_l -> FOR ID = expr : expr . instruction
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    (5) instruction -> . { instructions }
    (6) instruction -> . print_i ;
    (7) instruction -> . assign ;
    (8) instruction -> . while_l
    (9) instruction -> . for_l
    (10) instruction -> . continue_i ;
    (11) instruction -> . break_i ;
    (12) instruction -> . return_i ;
    (13) instruction -> . if_i
    (71) print_i -> . PRINT printargs
    (42) assign -> . var DIVASSIGN expr
    (43) assign -> . var MULASSIGN expr
    (44) assign -> . var SUBASSIGN expr
    (45) assign -> . var ADDASSIGN expr
    (46) assign -> . var = expr
    (65) while_l -> . WHILE ( expr ) instruction
    (66) for_l -> . FOR ID = expr : expr instruction
    (70) continue_i -> . CONTINUE
    (69) break_i -> . BREAK
    (67) return_i -> . RETURN expr
    (68) return_i -> . RETURN
    (63) if_i -> . IF ( expr ) instruction ELSE instruction
    (64) if_i -> . IF ( expr ) instruction
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    {               shift and go to state 4
    PRINT           shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    RETURN          shift and go to state 20
    IF              shift and go to state 21
    ID              shift and go to state 17

    instruction                    shift and go to state 138
    print_i                        shift and go to state 5
    assign                         shift and go to state 6
    while_l                        shift and go to state 7
    for_l                          shift and go to state 8
    continue_i                     shift and go to state 9
    break_i                        shift and go to state 10
    return_i                       shift and go to state 11
    if_i                           shift and go to state 12
    var                            shift and go to state 14
    matrix_element                 shift and go to state 22

state 134

    (41) matrix_element -> ID [ expr , expr ] .
    DIVASSIGN       reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    MULASSIGN       reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    SUBASSIGN       reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    ADDASSIGN       reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    =               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    ,               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    OR              reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    AND             reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    XOR             reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    DOTSUB          reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    DOTADD          reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    DOTDIV          reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    DOTMUL          reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    LESSEREQUAL     reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    GREATEREQUAL    reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    LESSER          reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    GREATER         reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    NOTEQUAL        reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    EQUAL           reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    /               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    *               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    -               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    +               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    ;               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    )               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    ]               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    :               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    {               reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    PRINT           reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    WHILE           reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    FOR             reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    CONTINUE        reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    BREAK           reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    RETURN          reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    IF              reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)
    ID              reduce using rule 41 (matrix_element -> ID [ expr , expr ] .)


state 135

    (63) if_i -> IF ( expr ) instruction ELSE . instruction
    (5) instruction -> . { instructions }
    (6) instruction -> . print_i ;
    (7) instruction -> . assign ;
    (8) instruction -> . while_l
    (9) instruction -> . for_l
    (10) instruction -> . continue_i ;
    (11) instruction -> . break_i ;
    (12) instruction -> . return_i ;
    (13) instruction -> . if_i
    (71) print_i -> . PRINT printargs
    (42) assign -> . var DIVASSIGN expr
    (43) assign -> . var MULASSIGN expr
    (44) assign -> . var SUBASSIGN expr
    (45) assign -> . var ADDASSIGN expr
    (46) assign -> . var = expr
    (65) while_l -> . WHILE ( expr ) instruction
    (66) for_l -> . FOR ID = expr : expr instruction
    (70) continue_i -> . CONTINUE
    (69) break_i -> . BREAK
    (67) return_i -> . RETURN expr
    (68) return_i -> . RETURN
    (63) if_i -> . IF ( expr ) instruction ELSE instruction
    (64) if_i -> . IF ( expr ) instruction
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    {               shift and go to state 4
    PRINT           shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    RETURN          shift and go to state 20
    IF              shift and go to state 21
    ID              shift and go to state 17

    instruction                    shift and go to state 139
    print_i                        shift and go to state 5
    assign                         shift and go to state 6
    while_l                        shift and go to state 7
    for_l                          shift and go to state 8
    continue_i                     shift and go to state 9
    break_i                        shift and go to state 10
    return_i                       shift and go to state 11
    if_i                           shift and go to state 12
    var                            shift and go to state 14
    matrix_element                 shift and go to state 22

state 136

    (55) variable -> ID [ expr : . ]
    (57) variable -> ID [ expr : . expr , expr : expr ]
    (58) variable -> ID [ expr : . expr ]
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    ]               shift and go to state 141
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 140
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 137

    (56) variable -> ID [ : expr . ]
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ]               shift and go to state 142
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 138

    (66) for_l -> FOR ID = expr : expr instruction .
    {               reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    PRINT           reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    WHILE           reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    FOR             reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    CONTINUE        reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    BREAK           reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    RETURN          reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    IF              reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    ID              reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    $end            reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    }               reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)
    ELSE            reduce using rule 66 (for_l -> FOR ID = expr : expr instruction .)


state 139

    (63) if_i -> IF ( expr ) instruction ELSE instruction .
    {               reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    PRINT           reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    WHILE           reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    FOR             reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    BREAK           reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    RETURN          reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    IF              reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    ID              reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    $end            reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    }               reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)
    ELSE            reduce using rule 63 (if_i -> IF ( expr ) instruction ELSE instruction .)


state 140

    (57) variable -> ID [ expr : expr . , expr : expr ]
    (58) variable -> ID [ expr : expr . ]
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ,               shift and go to state 143
    ]               shift and go to state 144
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 141

    (55) variable -> ID [ expr : ] .
    ]               reduce using rule 55 (variable -> ID [ expr : ] .)
    ,               reduce using rule 55 (variable -> ID [ expr : ] .)


state 142

    (56) variable -> ID [ : expr ] .
    ]               reduce using rule 56 (variable -> ID [ : expr ] .)
    ,               reduce using rule 56 (variable -> ID [ : expr ] .)


state 143

    (57) variable -> ID [ expr : expr , . expr : expr ]
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 145
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 144

    (58) variable -> ID [ expr : expr ] .
    ]               reduce using rule 58 (variable -> ID [ expr : expr ] .)
    ,               reduce using rule 58 (variable -> ID [ expr : expr ] .)


state 145

    (57) variable -> ID [ expr : expr , expr . : expr ]
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    :               shift and go to state 146
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 146

    (57) variable -> ID [ expr : expr , expr : . expr ]
    (14) expr -> . mat_fun ( expr )
    (15) expr -> . matrix
    (16) expr -> . unary
    (17) expr -> . expr OR expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr XOR expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTADD expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr DOTMUL expr
    (24) expr -> . expr LESSEREQUAL expr
    (25) expr -> . expr GREATEREQUAL expr
    (26) expr -> . expr LESSER expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOTEQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . ( expr )
    (35) expr -> . var
    (36) expr -> . FLOATNUM
    (37) expr -> . INTNUM
    (38) expr -> . STRING
    (60) mat_fun -> . ONES
    (61) mat_fun -> . EYE
    (62) mat_fun -> . ZEROS
    (49) matrix -> . [ vectors ]
    (47) unary -> . NOT expr
    (48) unary -> . - expr
    (39) var -> . ID
    (40) var -> . matrix_element
    (41) matrix_element -> . ID [ expr , expr ]
    (               shift and go to state 33
    FLOATNUM        shift and go to state 38
    INTNUM          shift and go to state 39
    STRING          shift and go to state 40
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    ZEROS           shift and go to state 43
    [               shift and go to state 44
    NOT             shift and go to state 45
    -               shift and go to state 36
    ID              shift and go to state 17

    expr                           shift and go to state 147
    mat_fun                        shift and go to state 32
    matrix                         shift and go to state 34
    unary                          shift and go to state 35
    var                            shift and go to state 37
    matrix_element                 shift and go to state 22

state 147

    (57) variable -> ID [ expr : expr , expr : expr . ]
    (17) expr -> expr . OR expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . XOR expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTADD expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . DOTMUL expr
    (24) expr -> expr . LESSEREQUAL expr
    (25) expr -> expr . GREATEREQUAL expr
    (26) expr -> expr . LESSER expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOTEQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ]               shift and go to state 148
    OR              shift and go to state 58
    AND             shift and go to state 59
    XOR             shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTADD          shift and go to state 62
    DOTDIV          shift and go to state 63
    DOTMUL          shift and go to state 64
    LESSEREQUAL     shift and go to state 65
    GREATEREQUAL    shift and go to state 66
    LESSER          shift and go to state 67
    GREATER         shift and go to state 68
    NOTEQUAL        shift and go to state 69
    EQUAL           shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 148

    (57) variable -> ID [ expr : expr , expr : expr ] .
    ]               reduce using rule 57 (variable -> ID [ expr : expr , expr : expr ] .)
    ,               reduce using rule 57 (variable -> ID [ expr : expr , expr : expr ] .)
